// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test draftUtils functions Test draftUtils Alignment functions Test getAnchorBlockData function 1`] = `
Object {
  "textAlignment": "left",
}
`;

exports[`Test draftUtils functions Test draftUtils Alignment functions Test setTextAlignment function 1`] = `
Object {
  "blocks": Array [
    Object {
      "data": Object {
        "textAlignment": "right",
      },
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "50k2j",
      "text": "I am text without alignment",
      "type": "unstyled",
    },
    Object {
      "data": Object {
        "textAlignment": "left",
      },
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "civd5",
      "text": "I am text with left alignment",
      "type": "unstyled",
    },
    Object {
      "data": Object {
        "textAlignment": "center",
      },
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "ehr1q",
      "text": "I am text with center alignment",
      "type": "unstyled",
    },
    Object {
      "data": Object {
        "textAlignment": "right",
      },
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "bmg0d",
      "text": "I am text with right alignment",
      "type": "unstyled",
    },
    Object {
      "data": Object {
        "textAlignment": "justify",
      },
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "e2imv",
      "text": "I am text with justify alignment",
      "type": "unstyled",
    },
  ],
  "entityMap": Object {},
}
`;

exports[`Test draftUtils functions Test draftUtils Blocks functions Test deleteBlock function 1`] = `
Object {
  "blocks": Array [
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "8s1v3",
      "text": "",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "bsrvp",
      "text": "",
      "type": "unstyled",
    },
  ],
  "entityMap": Object {},
}
`;

exports[`Test draftUtils functions Test draftUtils Blocks functions Test getSelectedBlocks function should return array with the selected blocks 1`] = `
Array [
  Immutable.Record {
    "key": "1u5r4",
    "type": "atomic",
    "text": " ",
    "characterList": Immutable.List [
      Immutable.Record {
        "style": Immutable.OrderedSet [],
        "entity": "3",
      },
    ],
    "depth": 0,
    "data": Immutable.Map {},
  },
  Immutable.Record {
    "key": "bsrvp",
    "type": "unstyled",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
]
`;

exports[`Test draftUtils functions Test draftUtils Blocks functions Test getSelectedBlocks function should return the block that belongs to the cursor 1`] = `
Array [
  Immutable.Record {
    "key": "8s1v3",
    "type": "unstyled",
    "text": "",
    "characterList": Immutable.List [],
    "depth": 0,
    "data": Immutable.Map {},
  },
]
`;

exports[`Test draftUtils functions Test draftUtils Blocks functions Test replaceWithEmptyBlock function 1`] = `
Object {
  "blocks": Array [
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "8s1v3",
      "text": "",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "1u5r4",
      "text": "",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "bsrvp",
      "text": "",
      "type": "unstyled",
    },
  ],
  "entityMap": Object {},
}
`;

exports[`Test draftUtils functions Test draftUtils Blocks functions should create block 1`] = `Immutable.Map {}`;

exports[`Test draftUtils functions Test draftUtils Blocks functions should get block info 1`] = `
Object {
  "entityData": Object {
    "config": Object {
      "alignment": "center",
      "size": "content",
    },
    "gif": Object {
      "height": 400,
      "originalUrl": "https://media1.giphy.com/media/hrk8ehR4lCZ27FtjPA/giphy_s.gif",
      "stillUrl": "https://media1.giphy.com/media/hrk8ehR4lCZ27FtjPA/giphy_s.gif",
      "width": 480,
    },
  },
  "type": "wix-draft-plugin-giphy",
}
`;

exports[`Test draftUtils functions Test draftUtils Blocks functions should get selection renge 1`] = `
Array [
  0,
  7,
]
`;

exports[`Test draftUtils functions Test draftUtils Blocks functions should merge block data 1`] = `
EditorState {
  "_immutable": Immutable.Record {
    "allowUndo": true,
    "currentContent": Immutable.Record {
      "entityMap": Object {},
      "blockMap": Immutable.OrderedMap {
        "50k2j": Immutable.Record {
          "key": "50k2j",
          "type": "unstyled",
          "text": "I am text without alignment",
          "characterList": Immutable.List [
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
          ],
          "depth": 0,
          "data": Immutable.Map {
            "textAlignment": "right",
          },
        },
        "civd5": Immutable.Record {
          "key": "civd5",
          "type": "unstyled",
          "text": "I am text with left alignment",
          "characterList": Immutable.List [
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
          ],
          "depth": 0,
          "data": Immutable.Map {
            "textAlignment": "left",
          },
        },
        "ehr1q": Immutable.Record {
          "key": "ehr1q",
          "type": "unstyled",
          "text": "I am text with center alignment",
          "characterList": Immutable.List [
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
          ],
          "depth": 0,
          "data": Immutable.Map {
            "textAlignment": "center",
          },
        },
        "bmg0d": Immutable.Record {
          "key": "bmg0d",
          "type": "unstyled",
          "text": "I am text with right alignment",
          "characterList": Immutable.List [
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
          ],
          "depth": 0,
          "data": Immutable.Map {
            "textAlignment": "right",
          },
        },
        "e2imv": Immutable.Record {
          "key": "e2imv",
          "type": "unstyled",
          "text": "I am text with justify alignment",
          "characterList": Immutable.List [
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": null,
            },
          ],
          "depth": 0,
          "data": Immutable.Map {
            "textAlignment": "justify",
          },
        },
      },
      "selectionBefore": Immutable.Record {
        "anchorKey": "50k2j",
        "anchorOffset": 0,
        "focusKey": "50k2j",
        "focusOffset": 7,
        "isBackward": false,
        "hasFocus": true,
      },
      "selectionAfter": Immutable.Record {
        "anchorKey": "50k2j",
        "anchorOffset": 0,
        "focusKey": "50k2j",
        "focusOffset": 7,
        "isBackward": false,
        "hasFocus": true,
      },
    },
    "decorator": null,
    "directionMap": Immutable.OrderedMap {
      "50k2j": "LTR",
      "civd5": "LTR",
      "ehr1q": "LTR",
      "bmg0d": "LTR",
      "e2imv": "LTR",
    },
    "forceSelection": true,
    "inCompositionMode": false,
    "inlineStyleOverride": null,
    "lastChangeType": "change-block-data",
    "nativelyRenderedContent": null,
    "redoStack": Immutable.Stack [],
    "selection": Immutable.Record {
      "anchorKey": "50k2j",
      "anchorOffset": 0,
      "focusKey": "50k2j",
      "focusOffset": 7,
      "isBackward": false,
      "hasFocus": true,
    },
    "treeMap": Immutable.OrderedMap {
      "50k2j": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 27,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 27,
            },
          ],
        },
      ],
      "civd5": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 29,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 29,
            },
          ],
        },
      ],
      "ehr1q": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 31,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 31,
            },
          ],
        },
      ],
      "bmg0d": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 30,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 30,
            },
          ],
        },
      ],
      "e2imv": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 32,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 32,
            },
          ],
        },
      ],
    },
    "undoStack": Immutable.Stack [
      Immutable.Record {
        "entityMap": Object {},
        "blockMap": Immutable.OrderedMap {
          "50k2j": Immutable.Record {
            "key": "50k2j",
            "type": "unstyled",
            "text": "I am text without alignment",
            "characterList": Immutable.List [
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
            ],
            "depth": 0,
            "data": Immutable.Map {
              "textAlignment": "left",
            },
          },
          "civd5": Immutable.Record {
            "key": "civd5",
            "type": "unstyled",
            "text": "I am text with left alignment",
            "characterList": Immutable.List [
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
            ],
            "depth": 0,
            "data": Immutable.Map {
              "textAlignment": "left",
            },
          },
          "ehr1q": Immutable.Record {
            "key": "ehr1q",
            "type": "unstyled",
            "text": "I am text with center alignment",
            "characterList": Immutable.List [
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
            ],
            "depth": 0,
            "data": Immutable.Map {
              "textAlignment": "center",
            },
          },
          "bmg0d": Immutable.Record {
            "key": "bmg0d",
            "type": "unstyled",
            "text": "I am text with right alignment",
            "characterList": Immutable.List [
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
            ],
            "depth": 0,
            "data": Immutable.Map {
              "textAlignment": "right",
            },
          },
          "e2imv": Immutable.Record {
            "key": "e2imv",
            "type": "unstyled",
            "text": "I am text with justify alignment",
            "characterList": Immutable.List [
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
              Immutable.Record {
                "style": Immutable.OrderedSet [],
                "entity": null,
              },
            ],
            "depth": 0,
            "data": Immutable.Map {
              "textAlignment": "justify",
            },
          },
        },
        "selectionBefore": Immutable.Record {
          "anchorKey": "50k2j",
          "anchorOffset": 0,
          "focusKey": "50k2j",
          "focusOffset": 0,
          "isBackward": false,
          "hasFocus": false,
        },
        "selectionAfter": Immutable.Record {
          "anchorKey": "50k2j",
          "anchorOffset": 0,
          "focusKey": "50k2j",
          "focusOffset": 0,
          "isBackward": false,
          "hasFocus": false,
        },
      },
    ],
  },
}
`;

exports[`Test draftUtils functions Test draftUtils Blocks functions should set entity data 1`] = `
EditorState {
  "_immutable": Immutable.Record {
    "allowUndo": true,
    "currentContent": Immutable.Record {
      "entityMap": Object {
        "0": "6",
      },
      "blockMap": Immutable.OrderedMap {
        "8s1v3": Immutable.Record {
          "key": "8s1v3",
          "type": "unstyled",
          "text": "",
          "characterList": Immutable.List [],
          "depth": 0,
          "data": Immutable.Map {},
        },
        "1u5r4": Immutable.Record {
          "key": "1u5r4",
          "type": "atomic",
          "text": " ",
          "characterList": Immutable.List [
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": "6",
            },
          ],
          "depth": 0,
          "data": Immutable.Map {},
        },
        "bsrvp": Immutable.Record {
          "key": "bsrvp",
          "type": "unstyled",
          "text": "",
          "characterList": Immutable.List [],
          "depth": 0,
          "data": Immutable.Map {},
        },
      },
      "selectionBefore": Immutable.Record {
        "anchorKey": "8s1v3",
        "anchorOffset": 0,
        "focusKey": "8s1v3",
        "focusOffset": 0,
        "isBackward": false,
        "hasFocus": false,
      },
      "selectionAfter": Immutable.Record {
        "anchorKey": "8s1v3",
        "anchorOffset": 0,
        "focusKey": "8s1v3",
        "focusOffset": 0,
        "isBackward": false,
        "hasFocus": false,
      },
    },
    "decorator": null,
    "directionMap": Immutable.OrderedMap {
      "8s1v3": "LTR",
      "1u5r4": "LTR",
      "bsrvp": "LTR",
    },
    "forceSelection": false,
    "inCompositionMode": false,
    "inlineStyleOverride": null,
    "lastChangeType": null,
    "nativelyRenderedContent": null,
    "redoStack": Immutable.Stack [],
    "selection": Immutable.Record {
      "anchorKey": "8s1v3",
      "anchorOffset": 0,
      "focusKey": "8s1v3",
      "focusOffset": 0,
      "isBackward": false,
      "hasFocus": false,
    },
    "treeMap": Immutable.OrderedMap {
      "8s1v3": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 0,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 0,
            },
          ],
        },
      ],
      "1u5r4": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 1,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 1,
            },
          ],
        },
      ],
      "bsrvp": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 0,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 0,
            },
          ],
        },
      ],
    },
    "undoStack": Immutable.Stack [],
  },
}
`;

exports[`Test draftUtils functions Test draftUtils Blocks functions should set selection 1`] = `
EditorState {
  "_immutable": Immutable.Record {
    "allowUndo": true,
    "currentContent": Immutable.Record {
      "entityMap": Object {
        "0": "13",
      },
      "blockMap": Immutable.OrderedMap {
        "8s1v3": Immutable.Record {
          "key": "8s1v3",
          "type": "unstyled",
          "text": "",
          "characterList": Immutable.List [],
          "depth": 0,
          "data": Immutable.Map {},
        },
        "1u5r4": Immutable.Record {
          "key": "1u5r4",
          "type": "atomic",
          "text": " ",
          "characterList": Immutable.List [
            Immutable.Record {
              "style": Immutable.OrderedSet [],
              "entity": "13",
            },
          ],
          "depth": 0,
          "data": Immutable.Map {},
        },
        "bsrvp": Immutable.Record {
          "key": "bsrvp",
          "type": "unstyled",
          "text": "",
          "characterList": Immutable.List [],
          "depth": 0,
          "data": Immutable.Map {},
        },
      },
      "selectionBefore": Immutable.Record {
        "anchorKey": "8s1v3",
        "anchorOffset": 0,
        "focusKey": "8s1v3",
        "focusOffset": 0,
        "isBackward": false,
        "hasFocus": false,
      },
      "selectionAfter": Immutable.Record {
        "anchorKey": "8s1v3",
        "anchorOffset": 0,
        "focusKey": "8s1v3",
        "focusOffset": 0,
        "isBackward": false,
        "hasFocus": false,
      },
    },
    "decorator": null,
    "directionMap": Immutable.OrderedMap {
      "8s1v3": "LTR",
      "1u5r4": "LTR",
      "bsrvp": "LTR",
    },
    "forceSelection": false,
    "inCompositionMode": false,
    "inlineStyleOverride": null,
    "lastChangeType": null,
    "nativelyRenderedContent": null,
    "redoStack": Immutable.Stack [],
    "selection": Immutable.Map {
      "anchorKey": "1u5r4",
      "anchorOffset": 0,
      "focusKey": "bsrvp",
      "focusOffset": 0,
    },
    "treeMap": Immutable.OrderedMap {
      "8s1v3": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 0,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 0,
            },
          ],
        },
      ],
      "1u5r4": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 1,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 1,
            },
          ],
        },
      ],
      "bsrvp": Immutable.List [
        Immutable.Record {
          "start": 0,
          "end": 0,
          "decoratorKey": null,
          "leaves": Immutable.List [
            Immutable.Record {
              "start": 0,
              "end": 0,
            },
          ],
        },
      ],
    },
    "undoStack": Immutable.Stack [],
  },
}
`;

exports[`Test draftUtils functions Test draftUtils Links functions Test getLinkDataInSelection function 1`] = `
Object {
  "rel": "noopener",
  "target": "_blank",
  "url": "www.google.com",
}
`;

exports[`Test draftUtils functions Test draftUtils Links functions Test insertLinkAtCurrentSelection function 1`] = `
Object {
  "blocks": Array [
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [
        Object {
          "key": 0,
          "length": 7,
          "offset": 0,
        },
      ],
      "inlineStyleRanges": Array [
        Object {
          "length": 7,
          "offset": 0,
          "style": "UNDERLINE",
        },
      ],
      "key": "50k2j",
      "text": "Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition.",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "d4hhc",
      "text": "Bring to the table win-win survival strategies to ensure proactive domination.",
      "type": "header-two",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "2s6ta",
      "text": "At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution.",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "87u",
      "text": "Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.",
      "type": "header-three",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "am5bt",
      "text": "Capitalize on low hanging fruit to identify a ballpark value added activity to beta test.",
      "type": "unstyled",
    },
  ],
  "entityMap": Object {
    "0": Object {
      "data": Object {
        "rel": "noopener",
        "target": "_blank",
        "url": "www.google.com",
      },
      "mutability": "MUTABLE",
      "type": "LINK",
    },
  },
}
`;

exports[`Test draftUtils functions Test draftUtils Links functions Test insertLinkInPosition function 1`] = `
Object {
  "blocks": Array [
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [
        Object {
          "key": 0,
          "length": 7,
          "offset": 0,
        },
      ],
      "inlineStyleRanges": Array [
        Object {
          "length": 7,
          "offset": 0,
          "style": "UNDERLINE",
        },
      ],
      "key": "50k2j",
      "text": "Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition.",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "d4hhc",
      "text": "Bring to the table win-win survival strategies to ensure proactive domination.",
      "type": "header-two",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "2s6ta",
      "text": "At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution.",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "87u",
      "text": "Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.",
      "type": "header-three",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "am5bt",
      "text": "Capitalize on low hanging fruit to identify a ballpark value added activity to beta test.",
      "type": "unstyled",
    },
  ],
  "entityMap": Object {
    "0": Object {
      "data": Object {
        "rel": "noopener",
        "target": "_blank",
        "url": "www.google.com",
      },
      "mutability": "MUTABLE",
      "type": "LINK",
    },
  },
}
`;

exports[`Test draftUtils functions Test draftUtils Links functions Test removeLinksInSelection function should not remove links outside the selection 1`] = `
Object {
  "blocks": Array [
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [
        Object {
          "key": 0,
          "length": 7,
          "offset": 0,
        },
      ],
      "inlineStyleRanges": Array [
        Object {
          "length": 7,
          "offset": 0,
          "style": "UNDERLINE",
        },
      ],
      "key": "50k2j",
      "text": "Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition.",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "d4hhc",
      "text": "Bring to the table win-win survival strategies to ensure proactive domination.",
      "type": "header-two",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "2s6ta",
      "text": "At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution.",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "87u",
      "text": "Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.",
      "type": "header-three",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "am5bt",
      "text": "Capitalize on low hanging fruit to identify a ballpark value added activity to beta test.",
      "type": "unstyled",
    },
  ],
  "entityMap": Object {
    "0": Object {
      "data": Object {
        "rel": "noopener",
        "target": "_blank",
        "url": "www.google.com",
      },
      "mutability": "MUTABLE",
      "type": "LINK",
    },
  },
}
`;

exports[`Test draftUtils functions Test draftUtils Links functions Test removeLinksInSelection function should remove link in selection 1`] = `
Object {
  "blocks": Array [
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "50k2j",
      "text": "Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition.",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "d4hhc",
      "text": "Bring to the table win-win survival strategies to ensure proactive domination.",
      "type": "header-two",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "2s6ta",
      "text": "At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution.",
      "type": "unstyled",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "87u",
      "text": "Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.",
      "type": "header-three",
    },
    Object {
      "data": Object {},
      "depth": 0,
      "entityRanges": Array [],
      "inlineStyleRanges": Array [],
      "key": "am5bt",
      "text": "Capitalize on low hanging fruit to identify a ballpark value added activity to beta test.",
      "type": "unstyled",
    },
  ],
  "entityMap": Object {},
}
`;
